[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 scGTM authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/RealDataAnalysis1.html","id":"introduction","dir":"Articles","previous_headings":"Real Data Analysis Example 1","what":"Introduction","title":"Real Data Analysis Example 1","text":"example, show scGTM recapitulates gene expression trends endometrial transformation human menstrual cycle.originally second example author showed part 3 scGTM paper.","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(SingleCellExperiment)) suppressPackageStartupMessages(library(ComplexHeatmap)) suppressPackageStartupMessages(library(viridis)) suppressPackageStartupMessages(library(useful)) suppressPackageStartupMessages(library(RColorBrewer)) suppressPackageStartupMessages(library(scales)) suppressPackageStartupMessages(library(DESeq2)) suppressPackageStartupMessages(library(scGTM))"},{"path":"/articles/RealDataAnalysis1.html","id":"read-the-reference-data","dir":"Articles","previous_headings":"Real Data Analysis Example 1","what":"Read the Reference Data","title":"Real Data Analysis Example 1","text":"WANG dataset contains 20 exemplar genes exhibit temporal expression trends unciliated epithelia cells human menstrual cycle. Find color appropriate","code":"wang_sce <- readRDS(\"wang_sce.rds\") gene_vec <- c(\"PLAU\", \"MMP7\", \"THBS1\", \"CADM1\", \"NPAS3\", \"ATP1A1\", \"ANK3\", \"ALPL\", \"TRAK1\", \"SCGB1D2\", \"MT1F\", \"MT1X\", \"MT1E\", \"MT1G\", \"CXCL14\", \"MAOA\", \"DPP4\", \"NUPR1\", \"GPX3\", \"PAEP\") GSE111976_summary_C1_donor_phase <- read_csv(\"GSE111976_summary_C1_donor_phase.csv\") ## New names: ## Rows: 19 Columns: 4 ## ── Column specification ## ──────────────────────────────────────────────────────── Delimiter: \",\" chr ## (1): phase_canonical dbl (3): ...1, donor, phase_sc_Fig.3 ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -> `...1` colData(wang_sce)$phase_canonical <- sapply(colData(wang_sce)$donor, function(x) {   res <- GSE111976_summary_C1_donor_phase %>% dplyr::filter(donor == x) %>% dplyr::select(phase_canonical) %>% simplify2array()   res })  colData(wang_sce)$phase_canonical <- factor(colData(wang_sce)$phase_canonical, levels = c(\"menstrual\", \"proliferative_early\",\"proliferative_late\", \"secretory_early\",\"secretory_mid\", \"secretory_late\")) wang_sub <- wang_sce[gene_vec, ] cell_order <- colData(wang_sub) %>%as_tibble(rownames = \"cell\") %>% dplyr::arrange(pseudotime)%>% .$cell pseudotime <- colData(wang_sub) %>%as_tibble(rownames = \"cell\") %>% dplyr::arrange(pseudotime)%>% .$pseudotime wang_sub <- wang_sub[gene_vec, cell_order] mat <- log1p(round((assay(wang_sub, \"cpm\")))) cell_order <- colData(wang_sub) %>% as_tibble(rownames = \"cell\") %>% dplyr::arrange(pseudotime)%>% .$cell pseudotime <- colData(wang_sub) %>% as_tibble(rownames = \"cell\") %>% dplyr::arrange(pseudotime)%>% .$pseudotime mat <- mat[, cell_order]  mat <- t(apply(mat, 1, rescale)) ha = HeatmapAnnotation(Phase = colData(wang_sub)$phase_canonical, col = list(Phase = c(\"menstrual\" = \"#A50026\", \"proliferative_early\" = \"#D73027\",\"proliferative_late\" = \"#FEE090\", \"secretory_early\" = \"#ABD9E9\",\"secretory_mid\" = \"#4575B4\", \"secretory_late\" = \"#313695\"))) p1 <- ComplexHeatmap::Heatmap(mat, cluster_rows = FALSE, cluster_columns = FALSE, show_column_names = FALSE, col=viridis(50), top_annotation = ha, name = \"heatmap1\", show_heatmap_legend = FALSE, column_title = \"Original Data\") dat <- data.frame(Index = colnames(mat), pseudotime = colData(wang_sub)$pseudotime)  dat <- cbind(dat, round(t(assay(wang_sub, \"cpm\"))))"},{"path":"/articles/RealDataAnalysis1.html","id":"import-parameter-csv","dir":"Articles","previous_headings":"Real Data Analysis Example 1 > Read the Reference Data","what":"Import parameter csv","title":"Real Data Analysis Example 1","text":"","code":"Poisson_para<-runscGTM(t=rownames(wang_sub), y=wang_sub, sce=\"counts\", marginal=\"Poisson\",hill_only = TRUE) ## The need of transformation:  FALSE ## We are estimating gene MT1F with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  4.65 2.06 30.48 0.73 6.57  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.709 ,  0.744 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 1.827 ,  2.29 ) ##  k2 : ( 22.364 ,  38.588 ) ## The need of transformation:  FALSE ## We are estimating gene MT1X with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  4.29 2.12 16.1 0.67 -35.3  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.648 ,  0.697 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 1.812 ,  2.42 ) ##  k2 : ( 11.476 ,  20.721 ) ## The need of transformation:  FALSE ## We are estimating gene MT1E with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  4.06 3.23 7.19 0.64 -15.87  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.601 ,  0.67 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 2.687 ,  3.783 ) ##  k2 : ( 4.591 ,  9.78 ) ## The need of transformation:  FALSE ## We are estimating gene MT1G with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  5.43 3.51 47.7 0.73 -66.68  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.719 ,  0.743 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 3.24 ,  3.779 ) ##  k2 : ( 37.784 ,  57.612 ) ## The need of transformation:  TRUE ## We are estimating gene CXCL14 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  6.18 54.42 53.49 0.77 70.46  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.761 ,  0.78 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 47.075 ,  61.763 ) ##  k2 : ( 42.879 ,  64.107 ) ## The need of transformation:  FALSE ## We are estimating gene MAOA with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  5.85 99 64.44 0.78 17.44  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.769 ,  0.785 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 82.13 ,  115.87 ) ##  k2 : ( 51.934 ,  76.939 ) ## The need of transformation:  TRUE ## We are estimating gene DPP4 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  5.14 72.66 35.52 0.77 6.25  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.759 ,  0.782 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 59.639 ,  85.673 ) ##  k2 : ( 27.194 ,  43.847 ) ## The need of transformation:  FALSE ## We are estimating gene NUPR1 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  5.71 25.11 23.22 0.79 -47.81  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.773 ,  0.801 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 21.787 ,  28.424 ) ##  k2 : ( 16.45 ,  29.999 ) ## The need of transformation:  TRUE ## We are estimating gene GPX3 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  8.23 -40.03 9.39 0.72 47.85  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.72 ,  0.725 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( -41.167 ,  -38.895 ) ##  k2 : ( 8.321 ,  10.463 ) ## The need of transformation:  TRUE ## We are estimating gene PAEP with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  9.27 51.74 34.21 0.79 13.8  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.787 ,  0.8 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 46.892 ,  56.595 ) ##  k2 : ( 28.621 ,  39.794 ) ## The need of transformation:  FALSE ## We are estimating gene PLAU with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  5.41 86.22 34.32 0.15 4  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.144 ,  0.162 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 63.3 ,  109.138 ) ##  k2 : ( 30.292 ,  38.352 ) ## The need of transformation:  TRUE ## We are estimating gene MMP7 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  5.67 2.42 17.73 0.21 19.38  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.187 ,  0.224 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( -0.344 ,  5.186 ) ##  k2 : ( 15.247 ,  20.213 ) ## The need of transformation:  TRUE ## We are estimating gene THBS1 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  5.54 13.1 17.84 0.21 -99  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.198 ,  0.229 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 8.71 ,  17.481 ) ##  k2 : ( 15.589 ,  20.094 ) ## The need of transformation:  TRUE ## We are estimating gene CADM1 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  5.05 10.43 16.4 0.24 -1.65  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.221 ,  0.255 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 6.942 ,  13.926 ) ##  k2 : ( 14.09 ,  18.707 ) ## The need of transformation:  FALSE ## We are estimating gene NPAS3 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  4.27 30.29 15.57 0.29 0.34  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.274 ,  0.3 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 24.274 ,  36.298 ) ##  k2 : ( 13.536 ,  17.602 ) ## The need of transformation:  FALSE ## We are estimating gene ATP1A1 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  4.59 4.76 5.09 0.44 39.01  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.408 ,  0.465 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 3.605 ,  5.906 ) ##  k2 : ( 4.226 ,  5.96 ) ## The need of transformation:  FALSE ## We are estimating gene ANK3 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  4.86 6.04 13.54 0.48 7.51  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.467 ,  0.501 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 5.175 ,  6.908 ) ##  k2 : ( 11.71 ,  15.374 ) ## The need of transformation:  FALSE ## We are estimating gene ALPL with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  4.41 11.12 23.4 0.44 41.75  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.43 ,  0.458 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 9.564 ,  12.685 ) ##  k2 : ( 19.772 ,  27.018 ) ## The need of transformation:  FALSE ## We are estimating gene TRAK1 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  4.42 6.95 19.41 0.49 48.79  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.477 ,  0.509 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 6.017 ,  7.887 ) ##  k2 : ( 16.6 ,  22.214 ) ## The need of transformation:  FALSE ## We are estimating gene SCGB1D2 with marginal Poisson . ## Best parameter estimation: ##  mu , k1 , k2 , t0: ##  6.53 5.25 38.29 0.61 23.09  ## The 95% confidence interval of the activation time t0: ##  t0 : ( 0.602 ,  0.627 ) ##  ## The 95% CIs for activation strength k1 and k2: ##  k1 : ( 4.839 ,  5.66 ) ##  k2 : ( 32.149 ,  44.439 ) Poisson_para$maxy<-apply(t(assay(wang_sub,'counts')),2,max)  Poisson_para <- Poisson_para[,c('gene','mu','k1','k2','t0','Transform','maxy')]"},{"path":"/articles/RealDataAnalysis1.html","id":"gene-curve-function","dir":"Articles","previous_headings":"Real Data Analysis Example 1","what":"Gene curve function","title":"Real Data Analysis Example 1","text":"","code":"gene_curve <- function(t, mu, k1, k2, t0, flag, maxy, hill_only) {      link<-function(t, mu, k1, k2, t0){   part1<-mu * exp(- abs(k1) * (t - t0) ** 2) * (sign(k1) + (k1 == 0))   part2<-mu * exp(- abs(k2) * (t - t0) ** 2) * (sign(k2) + (k2 == 0))   out<-part1 * (t <= t0) + part2 * (t > t0)   out   }      log_mut_fit <- link(sort(t), mu, k1, k2, t0)    if(hill_only == FALSE){   #transformation if valley   if (flag){     log_mut_fit = -log_mut_fit + log(maxy + 1)   }}   log_mut_fit }"},{"path":"/articles/RealDataAnalysis1.html","id":"poisson","dir":"Articles","previous_headings":"Real Data Analysis Example 1","what":"Poisson","title":"Real Data Analysis Example 1","text":"Pseudotime quantile","code":"res <- apply(Poisson_para, 1, function(x, t_vec) {   suppressWarnings(x <- as.numeric(x))   sapply(t_vec, function(t) {     v <- gene_curve(t = t, mu = x[2], k1 = abs(x[3]), k2 = abs(x[4]),                      t0 = x[5], flag=x[6], maxy=x[7], hill_only = TRUE)     v})   }, t_vec = pseudotime) %>% t() rownames(res) <- rownames(mat)  colnames(res) <- colnames(mat)  res <- t(apply(res, 1, rescale)) p2 <- ComplexHeatmap::Heatmap(res, cluster_rows = FALSE, cluster_columns = FALSE, show_column_names = FALSE, col=viridis(50), top_annotation = ha, name = \"Normalized logCPM\", show_heatmap_legend = TRUE, column_title = \"Fitted scGTMs\") Fn <- ecdf(pseudotime) pos <- Fn(Poisson_para$t0)"},{"path":"/articles/RealDataAnalysis1.html","id":"visualization","dir":"Articles","previous_headings":"Real Data Analysis Example 1","what":"Visualization","title":"Real Data Analysis Example 1","text":"original study ordered 20 genes estimated pseudotime achieved maximum expression. second plot shows data agreed well menstrual cycle phases using scGTM, red segments highlighting estimated change times \\(t_0\\).","code":"ht_list <- p1 + p2 draw(ht_list, merge_legend = TRUE, ht_gap = unit(0.2, \"in\"), auto_adjust = FALSE) decorate_heatmap_body(\"Normalized logCPM\", {   for(i in 1:20) {     grid.lines(c(pos[21-i], pos[21-i]), c((i-1)/20, i/20), gp = gpar(lty = 1, lwd = 2, col = \"red\"))   }  }, slice = 1)"},{"path":"/articles/RealDataAnalysis2.html","id":"real-data-analysis-example-2","dir":"Articles","previous_headings":"","what":"Real Data Analysis Example 2","title":"Real Data Analysis Example 2","text":"scGTM identifies informative gene expression trends immune cell stimulation. second real data example, use scGTM categorize gene expression trends mouse dendritic cells(DCs) simulation lipopolysaccharide (LPS).","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(SingleCellExperiment)) suppressPackageStartupMessages(library(ComplexHeatmap)) suppressPackageStartupMessages(library(clusterExperiment)) suppressPackageStartupMessages(library(viridis)) suppressPackageStartupMessages(library(useful)) suppressPackageStartupMessages(library(RColorBrewer)) suppressPackageStartupMessages(library(umap)) suppressPackageStartupMessages(library(plotly)) suppressPackageStartupMessages(library(clusterProfiler)) suppressPackageStartupMessages(library(nichenetr)) suppressPackageStartupMessages(library(ggpubr)) suppressPackageStartupMessages(library(org.Hs.eg.db)) suppressPackageStartupMessages(library(org.Mm.eg.db)) theme_set(theme_bw()) LPS_sce <- read_csv(\"LPS data.csv\") ## Rows: 390 Columns: 4018 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \",\" ## chr    (1): Unnamed: 0 ## dbl (4017): pseudotime, CCL5, CXCL10, LYZ2, CCL4, IL12B, CCL22, IL1B, LYZ1, ... ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Poisson_para <- read_csv(\"Poisson_para.csv\") ## New names: ## Rows: 4016 Columns: 26 ## ── Column specification ## ──────────────────────────────────────────────────────── Delimiter: \",\" chr ## (2): gene_index, Fisher dbl (19): ...1, negative_log_likelihood, mu, k1, k2, ## t0, t0_lower, t0_upper,... lgl (5): phi, sd, alpha, beta, Design_para ## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ ## Specify the column types or set `show_col_types = FALSE` to quiet this message. ## • `` -> `...1` gene_counts <- LPS_sce %>% dplyr::rename(cell_id = `Unnamed: 0`) gene_counts <- gene_counts  %>% tidyr::pivot_longer(!c(\"pseudotime\", \"cell_id\"), names_to = \"gene\") %>% dplyr::mutate(`log(count+1)` = log1p(value))"},{"path":"/articles/RealDataAnalysis2.html","id":"poisson","dir":"Articles","previous_headings":"Real Data Analysis Example 2","what":"Poisson","title":"Real Data Analysis Example 2","text":"","code":"Poisson_para %>% dplyr::group_by(Transform) %>% dplyr::summarise(n()) ## # A tibble: 2 × 2 ##   Transform `n()` ##       <dbl> <int> ## 1         0  2341 ## 2         1  1675"},{"path":"/articles/RealDataAnalysis2.html","id":"cal-intercept-model","dir":"Articles","previous_headings":"Real Data Analysis Example 2 > Poisson","what":"Cal intercept model","title":"Real Data Analysis Example 2","text":"","code":"LPS_counts <- LPS_sce %>% dplyr::select(-c(\"Unnamed: 0\", \"pseudotime\")) %>% t() pseudotime <- LPS_sce$pseudotime Poisson_loglik <- apply(LPS_counts, 1, function(gene) {   fit <- mgcv::gam(gene ~ 1, family = \"poisson\")   -logLik(fit)})"},{"path":"/articles/RealDataAnalysis2.html","id":"select-significant-genes","dir":"Articles","previous_headings":"Real Data Analysis Example 2 > Poisson","what":"Select significant genes","title":"Real Data Analysis Example 2","text":"","code":"Poisson_new <- Poisson_para %>% dplyr::mutate(nzp = rowMeans(LPS_counts!=0))%>% dplyr::mutate(Poisson_para, nllik = Poisson_loglik) %>% dplyr::mutate(llk_diff = 2*(nllik - negative_log_likelihood)) %>% dplyr::arrange(desc(llk_diff)) %>% dplyr::mutate(pvalue = pchisq(llk_diff, 3, lower.tail = FALSE)) %>% dplyr::mutate(adj_pvalue = p.adjust(pvalue, \"BH\")) %>% dplyr::filter(adj_pvalue < 0.01) Poisson_new ## # A tibble: 2,338 × 31 ##     ...1 gene_index negative_…¹    mu    k1     k2    t0 phi   sd    alpha beta  ##    <dbl> <chr>            <dbl> <dbl> <dbl>  <dbl> <dbl> <lgl> <lgl> <lgl> <lgl> ##  1   918 GU332589       191392.  8.99 0.210  8.60  0.772 NA    NA    NA    NA    ##  2     1 CCL5           191664. 11.1  7.88   0.912 0.792 NA    NA    NA    NA    ##  3     9 GM11428        217635. 10.7  0.176 36.6   0.623 NA    NA    NA    NA    ##  4     3 LYZ2           211794. 11.1  0.354 16.5   0.575 NA    NA    NA    NA    ##  5  3034 ACTB             1287.  2.29 2.18  21.5   0.579 NA    NA    NA    NA    ##  6   171 CST3            10165.  4.53 1.69  33.3   0.608 NA    NA    NA    NA    ##  7   358 FTH1           221830. 10.4  0.296 13.3   0.750 NA    NA    NA    NA    ##  8    14 CCL17           47407.  4.00 3.13   3.50  0.519 NA    NA    NA    NA    ##  9  1695 AK140265       161029.  8.27 0.152  5.24  0.652 NA    NA    NA    NA    ## 10  2003 FTL1           214900. 10.4  7.83   0.536 0.296 NA    NA    NA    NA    ## # … with 2,328 more rows, 20 more variables: t0_lower <dbl>, t0_upper <dbl>, ## #   t0_std <dbl>, k1_lower <dbl>, k1_upper <dbl>, k1_std <dbl>, k2_lower <dbl>, ## #   k2_upper <dbl>, k2_std <dbl>, mu_lower <dbl>, mu_upper <dbl>, mu_std <dbl>, ## #   Fisher <chr>, Transform <dbl>, Design_para <lgl>, nzp <dbl>, nllik <dbl>, ## #   llk_diff <dbl>, pvalue <dbl>, adj_pvalue <dbl>, and abbreviated variable ## #   name ¹​negative_log_likelihood gene_counts <- gene_counts %>% dplyr::filter(gene %in% Poisson_new$gene_index)"},{"path":"/articles/RealDataAnalysis2.html","id":"convert-gene-name","dir":"Articles","previous_headings":"Real Data Analysis Example 2 > Poisson","what":"Convert gene name","title":"Real Data Analysis Example 2","text":"","code":"Poisson_new <- Poisson_new %>% mutate(gene_index = sapply(gene_index, function(x) {   gene <- str_split(x, \"-\")[[1]]   if(length(gene) > 1) {     gene <- str_to_title(gene)     gene <- paste(gene[1], gene[2], sep = \"-\")   } else {     gene <- str_to_title(gene)        }   gene <- gsub(\"rik\", \"Rik\", gene)   gene }))   gene_counts <- gene_counts %>% mutate(gene = sapply(gene, function(x) {   gene <- str_split(x, \"-\")[[1]]   if(length(gene) > 1) {     gene <- str_to_title(gene)     gene <- paste(gene[1], gene[2], sep = \"-\")   } else {     gene <- str_to_title(gene)        }   gene })) Poisson_mat <-Poisson_new %>% dplyr::select(-c(\"...1\", \"gene_index\", \"negative_log_likelihood\", \"phi\", \"pvalue\", \"Fisher\", \"k1_std\",\"k2_std\",\"mu_std\")) %>% as.matrix()"},{"path":"/articles/RealDataAnalysis2.html","id":"plot-curve","dir":"Articles","previous_headings":"Real Data Analysis Example 2 > Poisson","what":"Plot curve","title":"Real Data Analysis Example 2","text":"","code":"gene_curve <- function(t, mu, k1, k2, t0) {   if(t <= t0) v <- mu*exp(-k1*(t-t0)^2)   else v <- mu*exp(-k2*(t-t0)^2)   v } gene_predict <- function(gene, pseudotime) {   i = Poisson_new %>% dplyr::filter(gene_index == gene) %>% as.vector()   res <- gene_curve(t = pseudotime, mu = as.numeric(i[4]), k1 = abs(as.numeric(i[5])), k2 = abs(as.numeric(i[6])), t0 = as.numeric(i[7]))   res } gene_predict2 <- function(gene_use, pseudotime) {   i = Poisson_new %>% dplyr::filter(gene_index == gene_use) %>% as.vector()   gene_max <- gene_counts %>% group_by(gene) %>% dplyr::summarise(max_value = max(`log(count+1)`)) %>% dplyr::filter(gene == gene_use) %>% .$max_value   res <- gene_curve(t = pseudotime, mu = as.numeric(i[4]), k1 = abs(as.numeric(i[5])), k2 = abs(as.numeric(i[6])), t0 = as.numeric(i[7]))   gene_max - res }"},{"path":"/articles/RealDataAnalysis2.html","id":"add-sckgam-prediction","dir":"Articles","previous_headings":"Real Data Analysis Example 2 > Poisson","what":"Add scKGAM prediction","title":"Real Data Analysis Example 2","text":"use scGTM’s confidence levels three parameters \\(t_0\\) , \\(k_1\\) , \\(k_2\\) categorize 2405 genes three types: 1) hill-shaped mostly increasing genes 2) hill-shaped mostly decreasing genes 3) valley-shaped genes ### Plot genes       LPS dataset, top enriched GO terms different among three gene types: Mostly increasing, Mostly decreasing, Valley-shaped.meets expectation biologically interpretable. Notably, hill-shaped & mostly increasing genes related immune response processes, showing consistency expression trends (activation LPS stimulation) functions (immune response). , visualization example genes three types shown (b). observe scGTM’s fitted trends agree well data. conclusion, scGTM can help users discern genes specific trends trend-informative parameters.","code":"gene_counts <- gene_counts %>% dplyr::filter(gene %in% Poisson_new$gene_index) gene_vec1 <- Poisson_new %>% dplyr::arrange(desc(llk_diff)) %>% dplyr::filter(Transform == 0) %>% dplyr::filter(t0_lower > 0.6 & k1_lower > 1)%>% dplyr::arrange(desc(nzp))  gene_vec <- gene_vec1$gene_index[1:5] p1 <- gene_counts %>% dplyr::filter(gene %in% gene_vec) %>% dplyr::mutate(prediction = mapply(gene = gene, pseudotime  = pseudotime, FUN = gene_predict)) %>% dplyr::mutate(gene = factor(gene, levels = gene_vec)) %>% ggplot(aes(x = pseudotime, y = `log(count+1)`)) +geom_point(size = 1, alpha = 0.3) + geom_line(aes(y = prediction), color = \"blue\") + facet_wrap(~gene, scales = \"free_y\", nrow = 1) +theme(aspect.ratio = 1) + ggtitle(\"Hill-shaped Genes (Mostly Increasing)\") p1 gene_vec2 <- Poisson_new %>% dplyr::arrange(desc(llk_diff)) %>% dplyr::filter(Transform == 0) %>% dplyr::filter(t0_upper < 0.4 & k2_lower > 1) %>% dplyr::arrange(desc(nzp))  gene_vec <- gene_vec2$gene_index[1:5] p2 <- gene_counts %>% dplyr::filter(gene %in% gene_vec) %>% dplyr::mutate(prediction = mapply(gene = gene, pseudotime  = pseudotime, FUN = gene_predict)) %>% dplyr::mutate(gene = factor(gene, levels = gene_vec)) %>% ggplot(aes(x = pseudotime, y = `log(count+1)`)) +geom_point(size = 1, alpha = 0.3) + geom_line(aes(y = prediction), color = \"blue\")  + facet_wrap(~gene, scales = \"free_y\", nrow = 1) +theme(aspect.ratio = 1) +ggtitle(\"Hill-shaped Genes (Mostly Decreasing)\") p2 gene_vec3 <- Poisson_new %>% dplyr::arrange(desc(llk_diff)) %>% dplyr::filter(Transform == 1) %>% dplyr::filter(k1_lower > 1 & k2_lower > 1)%>% dplyr::arrange(desc(nzp))  gene_vec<- gene_vec3$gene_index[1:5] p3 <- gene_counts %>% dplyr::filter(gene %in% gene_vec) %>% dplyr::mutate(prediction = mapply(gene_use = gene, pseudotime  = pseudotime, FUN = gene_predict2)) %>% dplyr::mutate(gene = factor(gene, levels = gene_vec)) %>% ggplot(aes(x = pseudotime, y = `log(count+1)`)) +geom_point(size = 1, alpha = 0.3) + geom_line(aes(y = prediction), color = \"blue\")  + facet_wrap(~gene, scales = \"free_y\", nrow = 1) +theme(aspect.ratio = 1) +ggtitle(\"Valley-shaped Genes\") p3 gcSample <- list(`Mostly Increasing` = gene_vec1$gene_index, `Mostly Decreasing` = gene_vec2$gene_index, `Valley-shaped` = gene_vec3$gene_index)  ck <- compareCluster(geneCluster = gcSample, fun = enrichGO,                       OrgDb         = org.Mm.eg.db,                       ont           = \"BP\",                 pAdjustMethod = \"BH\",                 pvalueCutoff  = 0.01,                 qvalueCutoff  = 0.05,                 keyType       = \"SYMBOL\",                 maxGSSize = 500)  ck2 <- clusterProfiler::simplify(ck, cutoff = 0.6) p_go <- clusterProfiler::dotplot(ck2, showCategory = 10, font.size = 12, label_format = 30) p_go p_gene_trend <- ggpubr::ggarrange(p1, p2, p3, ncol = 1, align = \"hv\") p_gene_trend p_LPS <- ggpubr::ggarrange(p_go, p_gene_trend, ncol = 1, heights = c(8, 5), align = \"h\", labels = c(\"a\", \"b\"), font.label = list(size = 20, face = \"bold\", color =\"black\")) p_LPS"},{"path":"/articles/vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"scGTM Quickstart","text":"Modeling single-cell gene expression trends along cell pseudotime crucial analysis exploring biological processes. However, model interpretability flexibility indispensable understanding biological processes. existing methods either provide trends complex interpret using nonparametric models use interpretable restrictive models.\\(\\\\\\) scGTM designed application capture interpretable gene expression trends along cell pseudotime reveal molecular insights underlying biological processes. scGTM also can flexibly accommodate common distributions modeling gene expression counts.\\(\\\\\\) explanations parameters scGTM:\\(\\\\\\) t: numeric vector input normalized pseudotime data given gene,length equals numbers cells\\(\\\\\\) y1: vector integers, representing input expression counts given gene,length equals numbers cells\\(\\\\\\) gene_name: single string vector, indicates gene name used model, default=NULL\\(\\\\\\) marginal: string distribution name. One Poisson, ZIP, NB,ZINB, Gaussian.default=ZIP\\(\\\\\\) iter_num: single integer vector, indicates max number iteration used PSO algorithm estimates model parameters\\(\\\\\\) hill_only: logical vector, determine whether curve hill \\(\\\\\\) seed: numeric variable random seed, affecting parametric fitting marginal distribution.default=123\\(\\\\\\) quickstart guide, demonstrate basic functionality scGTM package. scGTM package allows users specify () inference method, use () example analysis.","code":"suppressPackageStartupMessages(library(stats)) suppressPackageStartupMessages(library(BiocParallel)) suppressPackageStartupMessages(library(ggplot2)) suppressPackageStartupMessages(library(tibble)) suppressPackageStartupMessages(library(cowplot)) suppressPackageStartupMessages(library(scGTM))"},{"path":"/articles/vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"scGTM Quickstart","text":"#Example gene Tmsb10 gyrus dataset #Visualization","code":"gyrus <- read.csv(file = 'gyrus_sce.csv') scGTM(t=gyrus$pseudotime,        y1=gyrus$Tmsb10,        marginal=\"Poisson\",       hill_only = FALSE) #> The need of transformation:  FALSE #> We are estimating gene with marginal Poisson . #> Best parameter estimation: #>  mu , k1 , k2 , t0: #>  4.28 7.7 11.41 0.7 3.4  #> The 95% confidence interval of the activation time t0: #>  t0 : ( 0.683 ,  0.718 ) #>  #> The 95% CIs for activation strength k1 and k2: #>  k1 : ( 7.068 ,  8.342 ) #>  k2 : ( 8.905 ,  13.92 ) #> $negative_log_likelihood #> [1] 8181.274 #>  #> $mu #> [1] 4.283738 #>  #> $k1 #> [1] 7.704972 #>  #> $k2 #> [1] 11.4126 #>  #> $t0 #> [1] 0.7001891 #>  #> $phi #> [1] NA #>  #> $sd #> [1] NA #>  #> $alpha #> [1] NA #>  #> $beta #> [1] NA #>  #> $t0_lower #> [1] 0.683 #>  #> $t0_upper #> [1] 0.718 #>  #> $t0_std #> [1] 0.008898592 #>  #> $k1_lower #> [1] 7.068 #>  #> $k1_upper #> [1] 8.342 #>  #> $k1_std #> [1] 0.3247922 #>  #> $k2_lower #> [1] 8.905 #>  #> $k2_upper #> [1] 13.92 #>  #> $k2_std #> [1] 1.279397 #>  #> $mu_lower #> [1] 4.171 #>  #> $mu_upper #> [1] 4.396 #>  #> $mu_std #> [1] 0.05741533 #>  #> $Fisher #> [1] \"Non-singular\" #>  #> $Transform #> [1] 0 #>  #> $Design_para #> [1] NA plot_result(para = c(4.28,7.7,11.41,0.7),              t = gyrus$pseudotime,              color = c('red', 'darkviolet', 'orange', 'darkgreen'),              marginal = \"Poisson\",              flag = FALSE,              y1 = gyrus$Tmsb10,              hill_only = FALSE,             gene_name = \"Tmsb10\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shiyu Ma. Author, maintainer. Lehan Zou. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ma S, Zou L (2022). scGTM: Single-cell Gene Expression Generalized Trend Model. R package version 0.0.0.9000, https://github.com/Sylviama1026/scGTM.","code":"@Manual{,   title = {scGTM: Single-cell Gene Expression Generalized Trend Model},   author = {Shiyu Ma and Lehan Zou},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/Sylviama1026/scGTM}, }"},{"path":"/index.html","id":"scgtm-single-cell-generalized-trend-model","dir":"","previous_headings":"","what":"Single-cell Gene Expression Generalized Trend Model","title":"Single-cell Gene Expression Generalized Trend Model","text":"scGTM abbreviation Single-cell Gene Expression Generalized Trend Model. R package modeling statistical relationship pseudotime gene expression data. paper available bioRXiv. intended bioinformatic scientists, applied statisticians, students prefer using Metaheuristic algorithms solving bioinformatic optimization problems. scGKM able provide various marginal gene distributions interpretable regression functions. Check features! Free software: MIT license","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Single-cell Gene Expression Generalized Trend Model","text":"package Bioconductor CRAN yet. installation please use following codes R.","code":"install.packages(\"devtools\") library(devtools)  devtools::install_github(\"Sylviama1026/scGTM\")"},{"path":"/reference/df.html","id":null,"dir":"Reference","previous_headings":"","what":"A Simulation dataset containing 500 cells and 80 genes — df","title":"A Simulation dataset containing 500 cells and 80 genes — df","text":"Simulation dataset containing 500 cells 80 genes","code":""},{"path":"/reference/df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Simulation dataset containing 500 cells and 80 genes — df","text":"","code":"data(\"df\")"},{"path":"/reference/df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A Simulation dataset containing 500 cells and 80 genes — df","text":"dataset 500 rows 82 cols Index index cells Time normalized pseudotime cell Gene1 expression counts gene1","code":""},{"path":"/reference/plot_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Fitted Model — plot_result","title":"Plot the Fitted Model — plot_result","text":"Plot Fitted Model","code":""},{"path":"/reference/plot_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Fitted Model — plot_result","text":"","code":"plot_result(   para,   t,   color,   marginal,   flag,   y1,   gene_name,   hill_only,   save_dir = NULL )"},{"path":"/reference/plot_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Fitted Model — plot_result","text":"para numeric vector Estimated parameters predefined distribution, length equals 6 7 depending distribution(take 6 Poisson ZIP Gaussian, 7 NB ZINB) t numeric vector input normalized pseudotime data given gene, length equals numbers cells color string vector length 4 define plot color marginal string distribution name. One Poisson, ZIP, NB, ZINB, Gaussian. flag boolean variable, flag=T indicates Valley shape, flag=F indicates Hill shape y1 vector integers, representing input expression counts given gene, length equals numbers cells gene_name vector strings, indicates genes' name used model, shown plotting hill_only logical vector, determine whether curve hill . save_dir vector strings, indicates saving path plots, default=NULL(save)","code":""},{"path":"/reference/plot_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Fitted Model — plot_result","text":"ggplot object","code":""},{"path":"/reference/plot_result.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot the Fitted Model — plot_result","text":"Shiyu Ma, Lehan Zou","code":""},{"path":"/reference/plot_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Fitted Model — plot_result","text":"","code":"data(\"df\") t<-df$Time color<-c('red', 'darkviolet', 'orange', 'darkgreen')  #Case1 flag<-FALSE para<-c(2.29,3.27,11.79,0.58,30.4,60.82) y1<-df$Gene1 gene_name<-\"Gene1\" marginal<-\"ZIP\" plot_result(para, t, color, marginal, flag, y1, gene_name,\"~/Desktop/Jessica_lab/scGTM_result/\") #> Error in !hill_only: invalid argument type  #Case2 flag<-TRUE para<-c(2.96143,3.769441,2.098308,0.4638821,2.971249,-2.451574) y1<-df$Gene11 gene_name<-\"Gene11\" marginal<-\"ZIP\" plot_result(para, t, color, marginal, flag, y1, gene_name,\"~/Desktop/Jessica_lab/scGTM_result/\") #> Error in !hill_only: invalid argument type  #Case3 flag<-FALSE para<-c(2.35,6.27,6.27,0.49) y1<-df$Gene1 gene_name<-\"Gene1\" marginal<-\"Gaussian\" plot_result(para, t, color, marginal, flag, y1, gene_name,\"~/Desktop/Jessica_lab/scGTM_result/\") #> Error in !hill_only: invalid argument type"},{"path":"/reference/runscGTM.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model on a List of Genes — runscGTM","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model on a List of Genes — runscGTM","text":"Estimate Parameters Single-cell Gene Expression Generalized Trend Model List Genes","code":""},{"path":"/reference/runscGTM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model on a List of Genes — runscGTM","text":"","code":"runscGTM(   t,   y,   sce = NULL,   marginal = \"ZIP\",   iter_num = 50,   seed = 123,   hill_only,   mc.cores = 2 )"},{"path":"/reference/runscGTM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model on a List of Genes — runscGTM","text":"t numeric vector input normalized pseudotime data given gene, length equals numbers cells (sce null, t string gene names use model) y tibble, representing input expression counts corresponding lists genes, number rows equals numbers cells, number columns equals numbers targeted genes, (sce null, y SingleCellExperiment object counts data) sce character vector, indicates assay name applied SingleCellExperiment object default=NULL marginal string distribution name. One Poisson, ZIP, NB, ZINB Gaussian. default=ZIP iter_num single integer vector, indicates max number iteration used PSO algorithm estimates model parameters seed numeric variable random seed, affecting parametric fitting marginal distribution. default=123 mc.cores Number cores used computing.","code":""},{"path":"/reference/runscGTM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model on a List of Genes — runscGTM","text":"tibble summary results genes","code":""},{"path":"/reference/runscGTM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model on a List of Genes — runscGTM","text":"Shiyu Ma","code":""},{"path":"/reference/runscGTM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model on a List of Genes — runscGTM","text":"","code":"data(\"df\") res <- scGTM::runscGTM(t=df$Time, y=df[,3:5]) #> The need of transformation:  FALSE #> We are estimating gene Gene3 with marginal ZIP . #> The need of transformation:  FALSE #> We are estimating gene Gene1 with marginal ZIP . #> The need of transformation:  FALSE #> We are estimating gene Gene2 with marginal ZIP .  data(\"sce\") t_sce<-rownames(sce) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians res_sce <- runscGTM(t=t_sce, y=sce, sce=\"logcounts\", marginal=\"Gaussian\") #> The need of transformation:  FALSE #> We are estimating gene Dynlt1a with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Ptma with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Aldoa with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Gm10116 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Ybx1 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Stmn2 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Snca with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Ncdn with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Eef2 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Ppp3ca with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Tmsb10 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Tuba1b with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Tubb2b with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Tubb5 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Tuba1a with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Stmn1 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Igfbpl1 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Rplp0 with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Junb with marginal Gaussian . #> The need of transformation:  FALSE #> We are estimating gene Xist with marginal Gaussian ."},{"path":"/reference/scGTM.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model — scGTM","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model — scGTM","text":"model fits gene's expression counts normalized pseudotime one four marginal distributions. function estimates corresponding parameters confidence intervals corresponding marginal distributions.","code":""},{"path":"/reference/scGTM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model — scGTM","text":"","code":"scGTM(   t,   y1,   gene_name = NULL,   marginal = \"ZIP\",   iter_num = 50,   seed = 123,   hill_only,   k_design = NULL,   Design_X = NULL )"},{"path":"/reference/scGTM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model — scGTM","text":"t numeric vector input normalized pseudotime data given gene, length equals numbers cells y1 vector integers, representing input expression counts given gene, length equals numbers cells gene_name single string vector, indicates gene name used model, default=NULL marginal string distribution name. One Poisson, ZIP, NB, ZINB,  Gaussian. default=ZIP iter_num single integer vector, indicates max number iteration used PSO algorithm estimates model parameters seed numeric variable random seed, affecting parametric fitting marginal distribution. default=123 hill_only logical vector, determine whether curve hill . k_design single positive integer, indicates number variables Design matrix, default=NULL Design_X numerical matrix whose number rows equals length y1, number columns equals k_design, default=NULL","code":""},{"path":"/reference/scGTM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model — scGTM","text":"log_likelihood cost, estimated parameters, confidence intervals gene","code":""},{"path":"/reference/scGTM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model — scGTM","text":"Shiyu Ma, Lehan Zou","code":""},{"path":"/reference/scGTM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Parameters in Single-cell Gene Expression Generalized Trend Model — scGTM","text":"","code":"y1<-floor(runif(100, min = 0, max = 20)) t<-runif(100, min = 0, max = 1) marginal<-\"ZIP\" scGTM(t=t, y1=y1, marginal=marginal) #> The need of transformation:  FALSE #> We are estimating gene with marginal ZIP . #> Error in scGTM(t = t, y1 = y1, marginal = marginal): argument \"hill_only\" is missing, with no default  data(\"df\") t<-df$Time marginal<-\"ZIP\" y1<-df$Gene11 scGTM(t=t, y1=y1, marginal=marginal) #> The need of transformation:  TRUE #> We are estimating gene with marginal ZIP . #> Error in scGTM(t = t, y1 = y1, marginal = marginal): argument \"hill_only\" is missing, with no default  data(\"df\") t<-df$Time marginal<-\"Gaussian\" y1<-df$Gene1 scGTM(t=t, y1=y1, marginal=marginal) #> The need of transformation:  FALSE #> We are estimating gene with marginal Gaussian . #> Error in scGTM(t = t, y1 = y1, marginal = marginal): argument \"hill_only\" is missing, with no default"},{"path":"/reference/sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A SingelCellExperiment dataset containing 20 genes and 2,291 cells — sce","title":"A SingelCellExperiment dataset containing 20 genes and 2,291 cells — sce","text":"SingelCellExperiment dataset containing 20 genes 2,291 cells","code":""},{"path":"/reference/sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A SingelCellExperiment dataset containing 20 genes and 2,291 cells — sce","text":"","code":"data(\"sce\")"},{"path":"/reference/sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A SingelCellExperiment dataset containing 20 genes and 2,291 cells — sce","text":"dataset 20 rows 2,291 cols","code":""}]
